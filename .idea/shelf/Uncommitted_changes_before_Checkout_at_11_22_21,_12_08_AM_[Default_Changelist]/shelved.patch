Index: RayTrace/RayTrace.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># RayTrace\n# version 1.1.0\n\n# Kimberly A. Riegel, PHD created this program to propagate sonic booms around\n# large structures, and to graduate. It is a ray tracing model that \n# will include specular and diffuse reflections. It will print out the\n# sound field at ear height, at relevant microphone locations, and at \n# the building walls. It will read in the fft of a sonic boom signature.\n\n# Dr. Riegel, William Costa, and George Seaton porting program from Fortran to python\n\n# Initialize variables and functions\nimport numpy as np  # matrices and arrays\nimport matplotlib.pyplot as plt  # for graphing\nimport Parameterfile as Pf\nimport Functions as Fun\nimport ReceiverPointSource as Rps  # For receivers\nimport GeometryParser as Gp\nfrom Atmosphere import Atmosphere\n\n\n# import GeometryParser as Bg\n\nimport time  # Time checks\nt = time.time()\nphase = 0\namplitude = 0\nprint(Pf.Fs)\n\n\n# What it does not do\n\"\"\"\n      Interacts with geometry parser\n      Have a way of reading in complex geometries - Yes, but not yet integrated\n      Anything resembling radiosity\n\"\"\"\n\n\ndef initial_signal(signal_length, fft_output):\n    \"\"\"\n    Making the array for the initial signals.\n    Input size_fft_two and output_signal\n    \"\"\"\n    signal_length2 = int(signal_length // 2)  # Making size_fft_two and setting it as an int again just to be sure\n    output_frequency = np.zeros((signal_length2, 3))  # Making output array equivalent to input_array in old code\n    throw_array = np.arange(1, signal_length2 + 1)  # Helps get rid of for-loops in old version\n\n    output_frequency[:, 0] = throw_array * Pf.Fs / signal_length  # Tried simplifying the math a bit from original\n    output_frequency[:, 1] = abs(fft_output[1:1 + signal_length2] / signal_length)  # Only go up to size_ftt_two\n    output_frequency[:, 2] = np.arctan2(np.imag(fft_output[1:1 + signal_length2] / signal_length),\n                                        np.real(fft_output[1:1 + signal_length2] / signal_length))\n\n    return output_frequency\n\n\ndef update_freq(dx_update, alpha_update, diffusion_update, lamb, air_absorb):\n    \"\"\"\n    Update ray phase and amplitude\n    \"\"\"\n    global phase, amplitude  # works directly\n    two_pi_dx_update = twopi * dx_update\n    ein = phase - (two_pi_dx_update / lamb)\n    zwei = ein % twopi\n    masque = zwei > np.pi\n    drei = masque * zwei - twopi\n    phase = np.where(masque, drei, ein)\n    amplitude *= ((1.0 - alpha_update) * (1.0 - diffusion_update) * np.exp(-air_absorb * dx_update))\n\n\ndef vex(d, f_initial, y, z):\n    \"\"\"The x coordinate of the ray \n    Used for veci\"\"\"\n    return (d - f_initial[1] * y - f_initial[2] * z) / f_initial[0]\n\n\ndef main():\n\n    global phase\n    global amplitude\n    global twopi\n    twopi = np.pi * 2\n    t = time.time()\n\n    # port and import receiver file\n    receiver_hit = 0\n    ground_hit = 0\n    building_hit = 0\n\n    # Initialize counters\n    xj = complex(0.0, 1.0)\n    radius2 = Pf.radius**2\n    ray_sum = 0\n\n    # Initialize receiver variables\n    last_receiver = np.zeros(3)\n    last_receiver2 = np.zeros(3)\n    receiver_point = np.zeros(3)\n    receiver_point2 = np.zeros(3)\n\n    # Read in input file\n    input_signal = np.loadtxt(Pf.INPUTFILE)\n    k = len(input_signal)\n    # masque = input_signal > 0\n    huge = 1000000.0\n\n    # Allocate the correct size to the signal and fft arrays\n    size_fft = k\n    size_fft_two = size_fft // 2\n    output_signal = np.fft.rfft(input_signal, size_fft)\n    # Create Atmosphere\n\n    atmos = Atmosphere(Pf.Temp,Pf.strat_height,Pf.type)\n    print('height and sound', atmos.strata, atmos.sound_speed)\n\n    #mesh Building\n    strat_mesh, min_dim = Gp.mesh_build(Pf.ipname, atmos)\n    # Create initial signal\n    frecuencias = initial_signal(size_fft, output_signal)      # Equivalent to inputArray in original\n    air_absorb = Fun.absorption(Pf.ps, frecuencias[:, 0], Pf.hr, Pf.Temp)   # size_fft_two\n    i = 0\n    all_lamb=np.zeros([len(atmos.sound_speed), len(frecuencias)])\n    for i in range(len(atmos.sound_speed)):\n        if i == len(atmos.sound_speed)-1:\n            speed = atmos.sound_speed[i]\n        else:\n            speed=(atmos.sound_speed[i] + atmos.sound_speed[i+1])/2\n        all_lamb[i, :] = speed/frecuencias[:, 0]\n        i+=1\n    lamb = Pf.soundspeed/frecuencias[:, 0]     # Used for updating frequencies in update function\n    time_array = np.arange(k) / Pf.Fs\n\n    #       Set initial values\n    v_initial = np.array([Pf.xinitial, Pf.yinitial, Pf.zinitial])\n    xi_initial = np.cos(Pf.phi) * np.sin(Pf.theta)\n    n_initial = np.sin(Pf.phi) * np.sin(Pf.theta)\n    zeta_initial = np.cos(Pf.theta)\n    length = np.sqrt(xi_initial * xi_initial + n_initial * n_initial + zeta_initial * zeta_initial)\n    f_initial = np.array([xi_initial, n_initial, zeta_initial])\n    d4 = np.dot(f_initial, v_initial)   # equivalent to tmp\n    #       Create initial boom array\n    #  Roll this all into a function later\n    y_space = Pf.boomspacing * abs(np.cos(Pf.phi))\n    z_space = Pf.boomspacing * abs(np.sin(Pf.theta))\n    if Pf.xmin == Pf.xmax:\n        ray_max = int((Pf.ymax - Pf.ymin) / y_space) * int((Pf.zmax - Pf.zmin) / z_space)\n        print(ray_max, ' is the ray_max')\n\n    j = np.arange(1, 1 + int((Pf.ymax-Pf.ymin) // y_space))\n    k_2 = np.arange(1, 1 + int((Pf.zmax-Pf.zmin) // z_space))\n    ray_y = Pf.ymin + j * y_space\n    ray_z = Pf.zmin + k_2 * z_space\n\n    boom_carpet = ((vex(d4, f_initial, y, z), y, z) for z in ray_z for y in ray_y)\n    # Create a receiver array, include a receiver file.\n    alpha_nothing = np.zeros(size_fft_two)\n\n    # Making specific receiver points using receiver module\n    Rps.Receiver.initialize(Pf.RecInput)\n    ears = Rps.Receiver.rList           # easier to write\n    for R in ears:          # hotfix\n        R.magnitude = np.zeros(size_fft_two)\n        R.direction = np.zeros(size_fft_two)\n    temp_receiver = np.array(np.zeros(len(ears)))\n    #       Initialize normalization factor\n    normalization = (np.pi*radius2)/(Pf.boomspacing**2)\n\n    output_array1 = np.zeros((size_fft_two, 6))\n    dh_output_array1 = np.zeros((size_fft_two, 6))\n\n    #       Define ground plane\n    ground_height = 0.000000000\n    ground_n = np.array([0.000000000, 0.000000000, 1.00000000])\n    ground_d = -ground_height\n\n    #     Allocate absorption coefficients for each surface for each frequency\n    alpha_ground = np.zeros(size_fft_two)\n    for D1 in range(0, size_fft_two):       # This loop has a minimal impact on performance\n        if frecuencias[D1, 0] >= 0.0 or frecuencias[D1, 0] < 88.0:\n            alpha_ground[D1] = Pf.tempalphaground[0]\n        elif frecuencias[D1, 0] >= 88.0 or frecuencias[D1, 0] < 177.0:\n            alpha_ground[D1] = Pf.tempalphaground[1]\n        elif frecuencias[D1, 0] >= 177.0 or frecuencias[D1, 0] < 355.0:\n            alpha_ground[D1] = Pf.tempalphaground[2]\n        elif frecuencias[D1, 0] >= 355.0 or frecuencias[D1, 0] < 710.0:\n            alpha_ground[D1] = Pf.tempalphaground[3]\n        elif frecuencias[D1, 0] >= 710.0 or frecuencias[D1, 0] < 1420.0:\n            alpha_ground[D1] = Pf.tempalphaground[4]\n        elif frecuencias[D1, 0] >= 1420.0 or frecuencias[D1, 0] < 2840.0:\n            alpha_ground[D1] = Pf.tempalphaground[5]\n        elif frecuencias[D1, 0] >= 2840.0 or frecuencias[D1, 0] < 5680.0:\n            alpha_ground[D1] = Pf.tempalphaground[6]\n        elif frecuencias[D1, 0] >= 5680.0 or frecuencias[D1, 0] < frecuencias[size_fft_two, 0]:\n            alpha_ground[D1] = Pf.tempalphaground[7]\n\n    alpha_building = np.zeros((Pf.absorbplanes, size_fft_two))\n    for W in range(Pf.absorbplanes):        # These also look minimal\n        for D2 in range(size_fft_two):\n            if frecuencias[D2, 0] >= 0.0 or frecuencias[D2, 0] < 88.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 0]\n            elif frecuencias[D2, 0] >= 88.0 or frecuencias[D2, 0] < 177.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 1]\n            elif frecuencias[D2, 0] >= 177.0 or frecuencias[D2, 0] < 355.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 2]\n            elif frecuencias[D2, 0] >= 355.0 or frecuencias[D2, 0] < 710.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 3]\n            elif frecuencias[D2, 0] >= 710.0 or frecuencias[D2, 0] < 1420.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 4]\n            elif frecuencias[D2, 0] >= 1420.0 or frecuencias[D2, 0] < 2840.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 5]\n            elif frecuencias[D2, 0] >= 2840.0 or frecuencias[D2, 0] < 5680.0:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 6]\n            elif frecuencias[D2, 0] >= 5680.0 or frecuencias[D2, 0] < frecuencias[size_fft_two, 0]:\n                alpha_building[W, D2] = Pf.tempalphabuilding[W, 7]\n\n    # This does not appear to be used, so I commented it out -- r0ml\n    # D = np.dot(f_initial, v_initial)   # Hotfix  We used this name right above\n\n    #        Mesh the patches for the environment.  Include patching file.\n    diffusion_ground = 0.0\n    if Pf.radiosity:  # If it exists as a non-zero number\n        #    import SingleBuildingGeometry\n        diffusion = Pf.radiosity\n    else:\n        diffusion = 0.0\n\n    ray_counter = 0\n\n    if Pf.h < (2 * Pf.radius):\n        print('h is less than 2r')\n        raise SystemExit\n\n    # These are for debugging, Uncomment this block and comment out the for loop below\n    # ray = 1389                    # @ Pf.boomSpacing = 1\n    # for i in range(606):\n    #      ray =      next(boom_carpet)\n    #      ray_counter += 1\n    #\n    # if ray:\n    # Begin tracing\n    check_direction = [0, 0, 0]\n    n_box = [0, 0, 0]\n    veci = np.array([0, 0, 0])\n    print('began rays')\n    n_strata=[0.0,0.0,1.0]\n    dx_ground=huge\n    #ray = 1122                   # @ Pf.boomSpacing = 1\n    #for i in range(1746):\n    #     ray =      next(boom_carpet)\n    #     ray_counter += 1\n\n    #if ray:\n    for ray in boom_carpet:              # Written like this for readability\n        veci = ray      # initial ray position\n        hit_count = 0\n        double_hit = 0\n        amplitude = frecuencias[:, 1]/normalization\n        phase = frecuencias[:, 2]\n\n        f = np.array(f_initial)                                      # Direction\n        for I in range(Pf.IMAX):      # Making small steps along the ray path.\n            # For each step we should return, location, phase and amplitude\n            dx_receiver = huge\n            # Find the closest sphere and store that as the distance\n            for index in range(len(atmos.strata)-1):\n#                print(atmos.strata[index],atmos.strata[index+1],veci[2])\n                if veci[2] >= atmos.strata[index] and veci[2] < atmos.strata[index + 1]:\n                    strat_no = index\n                    deriv_alpha = (atmos.sound_speed[index]-atmos.sound_speed[index+1])/(atmos.strata[index]-atmos.strata[index+1])\n            if veci[2] >= atmos.strata[len(atmos.strata)-1]:\n                    strat_no = len(atmos.strata)-1\n                    deriv_alpha = 0\n\n            #     Check Intersection with ground plane\n            strata_vd = np.dot(n_strata, f)\n#            print(strat_no,n_strata,f,strata_vd )\n            if(strata_vd < 0):\n                # This means that the ray is going down\n                strata_vo = ((np.dot(n_strata, veci)) - atmos.strata[strat_no])\n                dx_strata = -strata_vo / strata_vd\n#                print('strata_vd is negative',strata_vo, atmos.strata[strat_no],dx_strata)\n            #            ground_vd = ground_n[0] * f[0] + ground_n[1] * f[1] + ground_n[2] * f[2]\n                if dx_strata == 0 and strat_no != 0:\n                    # This means that it hit the strata in the previous iteration\n                    strata_vo = ((np.dot(n_strata, veci)) - atmos.strata[strat_no-1])\n                    dx_strata = -strata_vo / strata_vd\n            elif(strat_no+1<len(atmos.strata)):\n                #this means that the ray is going up\n                strata_vd=-strata_vd\n                strata_vo = ((np.dot(np.negative(n_strata), veci)) + atmos.strata[strat_no+1])\n                dx_strata = -strata_vo / strata_vd\n            else:\n                # this means that we are above the top strata\n                dx_strata = Pf.h\n\n            i = 0\n            for R in ears:\n                # The way that tempReceiver works now, it's only used here and only should be used here.\n                # It's not defined inside the receiver because it's ray dependant.\n                temp_receiver[i] = R.sphere_check(radius2, f, veci)    # Distance to receiver\n                i += 1\n\n    # We need to double check that double hit actually works.  R2 is not really\n    # a thing, we should make sure it is doing what we want.\n    #                 if np.all(R.position == receiver_point):\n    #                     double_hit = 0\n    #                 else:\n    #                     R2 = R\n    #                     double_hit = 1\n    #                     print('double hit')\n            temp_receiver[np.where((temp_receiver < (10.0**(-13.0))))] = huge\n            tmp = np.argmin(temp_receiver)\n            dx_receiver = temp_receiver[tmp]\n            if receiver_hit == 1:\n                dx_receiver=huge\n            if dx_receiver != huge:\n                receiver_point = ears[tmp].position\n\n                #     Check Intersection with ground plane\n\n            #     Check intersection with building\n            # dx_building = huge\n#            hit=0\n#            planeHit = 0\n            #     Check intersection with Boxes\n            #      for Q in range(0, Bg.BoxNumber):\n            #          dxNear, dxFar, hit, planeHit = Fun.box(Bg.BoxArrayNear[Q], Bg.BoxArrayFar[Q], veci, f)\n            #          if dxNear < dx_building:\n            #              dx_building = dxNear\n            #              Vecip1 = veci + np.multiply(dx_building, f)\n            #              whichBox = Q\n            #              n_box = Fun.plane(Vecip1, Bg.BoxArrayNear[whichBox], Bg.BoxArrayFar[whichBox], planeHit)\n            #   Implement Geometry parser\n            if building_hit == 1:\n                dx_building = huge\n            else:\n                if (min_dim > 2 * Pf.strat_height):\n                    dx_building, n_box = Gp.collision_check2(strat_mesh, veci, f)\n                else:\n                    if len(strat_mesh[strat_no]) == 0:\n                        dx_building=huge\n                        #print('this happens')\n                    else:\n                        if f[2]<0:\n                            #print('downward')\n                            if strat_mesh[strat_no-1] == []:\n                                dx_building = huge\n                            else:\n                                dx_building, n_box = Gp.collision_check2(strat_mesh[strat_no-1],veci,f)\n                        else:\n                            #print('upward')\n                            if strat_mesh[strat_no] == []:\n                                dx_building = huge\n                            else:\n                                dx_building, n_box = Gp.collision_check2(strat_mesh[strat_no], veci, f)\n#\n            #                ('nope this happens', dx_building, Gp.mesh, veci, f)\n                # for face in Gp.mesh:\n                #     dxnear, nTemp = Gp.collisionCheck(face, veci, f)\n                #     if dxnear < dx_building:\n                #         dx_building1 = dxnear\n                #         n_box1 = nTemp\n                # if (ray_counter == 606):\n                #     print('original',dx_building,n_box)\n\n            # This part doesn't really work well.  We have not incorporated it.\n            # Eventually all interactions will be triangles anyway so I'm leaving it here to be updated.\n\n            #   Check intersection with Triangles\n            #        if Bg.TriangleNumber > 0:\n            #            for Q in range(0, Bg.TriangleNumber):\n            #                dxNear, behind = Fun.Polygon(veci, f, Q, 3, Bg.TriangleNumber, Bg.PointNumbers,\n            #                Bg.TriangleArray,\n            #                                             Bg.BuildingPoints, normal, FaceNormalNo, FaceNormals)\n            #                if dxNear < dx_building:\n            #                    dx_building = dxNear\n            #                    n_box = normal\n            #                    whichBox = Q\n            #     Check intersection with Squares\n            #        if Bg.SquareNumber > 0:\n            #            for Q in range(0, Bg.SquareNumber):\n            #                dxNear, behind = Fun.Polygon(veci, f, Q, 4, SquareNumber,\n            #                PointNumbers, SquareArray, BuildingPoints,\n            #                normal, FaceNormalNo, FaceNormals)\n            #                if dxNear < dx_building:\n            #                    dx_building = dxNear\n            #                    n_box = normal\n            #                    whichBox = Q\n            if(ground_hit == 1):\n                dx_ground=huge\n            elif (veci[2] == 0.0):\n                dx_ground = dx_strata\n\n            building_hit = 0\n            receiver_hit = 0\n            ground_hit = 0\n            #print('veci',veci,f)\n            #print('dx',dx_receiver, dx_ground, dx_building,dx_strata)\n            #     Check to see if ray hits within step size\n            if dx_receiver <= dx_strata or dx_ground <= dx_strata or dx_building <= dx_strata:\n\n                dx = min(dx_receiver, dx_ground, dx_building)\n                #print('dx',dx)\n                #  if the ray hits a receiver, store in an array.  If the ray hits two, create two arrays to store in.\n        #        for R in ears:\n                if dx == dx_receiver:\n                    print('Ray ', ray_counter, ' hit receiver ', R.recNumber)\n                    veci = veci + (dx * f)\n                    f = f-dx*deriv_alpha/atmos.sound_speed[strat_no]\n                    receiver_hit = 1\n                    # checkDirection = f\n                    # if double_hit == 1:\n                    #    receiver_hit = 2\n                    hit_count = hit_count + 1\n                    update_freq(dx, alpha_nothing, 0, all_lamb[strat_no, :], air_absorb)\n                    # last_receiver = receiver_point\n                    output_array1[:, 0] = frecuencias[:, 0]\n                    output_array1[:, 1:4] = receiver_point[:]\n                    output_array1[:, 5] = phase[:]\n                    # if double_hit == 1:\n                    #    # R2 = R      #Supposed to be other R, but just a placeholder for now\n                    #    R.on_hit(amplitude/2, phase)\n                    #    R2.on_hit(amplitude/2, phase)\n                    # else:\n                    ears[tmp].on_hit(amplitude, phase)\n\n                    # if(double_hit==1):\n                    #      output_array1[:,4]=amplitude[:]/2.0\n                    #      dh_output_array1[:,0]=inputArray[:,0]\n                    #      dh_output_array1[:,1:4]=receiver_point2[:]\n                    #      dh_output_array1[:,4]=amplitude[:]/2.0\n                    #      dh_output_array1[:,5]=phase[:]\n                    #      last_receiver2 = receiver_point2\n                    # else:\n                    #      output_array1[:,4]=amplitude[:]\n                    # tempArray=Fun.receiverHITFUNC(size_fft,output_array1,Rps.arraySize,tempArray)\n                    # looks like it does the same thing as on_hit. Here later\n                    # R.on_hit(amplitude,phase)\n                    # if (double_hit==1):\n                    #      tempArray=Fun.receiverHITFUNC(size_fft,dh_output_array1,Rps.arraySize,tempArray)\n                    #      Using objects may circumvent the need to have this, but it stays for now\n                    #      count+=1\n                    # count+=1\n\n                if abs(dx - dx_ground) < 10.0**(-13.0):  # If the ray hits the ground then bounce and continue\n                    veci += (dx_ground * f)\n                    f = f - dx * deriv_alpha / atmos.sound_speed[strat_no]\n                    tmp = np.dot(ground_n, veci)\n                    if tmp != ground_d:\n                        veci[2] = 0\n                    print('hit ground at ', I)\n                    dot1 = np.dot(f, ground_n)\n                    n2 = np.dot(ground_n, ground_n)\n                    f -= (2.0 * (dot1 / n2 * ground_n))\n#                    length = np.sqrt(np.dot(f, f))\n                    ground_hit = 1\n#                    twoPiDx = np.pi * 2 * dx_ground\n                    #     Loop through all the frequencies\n                    update_freq(dx_ground, alpha_ground, diffusion_ground, all_lamb[strat_no,:], air_absorb)\n    #                if Pf.radiosity == 1 and (diffusion_ground != 0.0):\n    #                    for Q in range(0, PatchNo):\n    #                        if formFactors[0, Q, 1] == 1:\n    #                            if (veci[0] <= (patchArray[Q, W, 0] + 0.5 * patchArray[Q, W, 3]) and\n                #                            veci[0]>=(patchArray[Q, W, 0] - 0.5 * patchArray[Q, W, 3])):\n    #                                if veci[1] <= (patchArray[Q, W, 1] + 0.5 * patchArray[Q, W, 4]) and\n                    #                                veci[1]>=(patchArray[Q, W, 1] - 0.5 * patchArray[Q, W, 4]):\n    #                                    if veci[2] <= (patchArray[Q, W, 2] + 0.5 * patchArray[Q, W, 5]) and\n                    #                                    veci[2]>=(patchArray[Q, W, 2] - 0.5 * patchArray[Q, W, 5]):\n    #                                        temp2 = complex(abs(patchArray[Q, W, 6])*np.exp(xj*patchArray[Q, W, 7]))\n    #                                        temp3 = complex(abs(amplitude[W] * (1.0 - alphaGround[W]) *\n                #                                        diffusion_ground *\n                #                                        exp(-m * dx_ground)) * exp(1j * phaseFinal))\n    #                                        temp4 = temp2 + temp3\n    #                                        patchArray[Q, W, 6] = abs(temp4)\n    #                                        patchArray[Q, W, 7] = np.arctan(temp4.imag,temp4.real)\n                if dx == dx_building:   # if the ray hits the building then change the direction and continue\n                    veci += (dx * f)\n                    f = f - dx * deriv_alpha / atmos.sound_speed[strat_no]\n                    print('hit building at step ', I)\n                    n2 = np.dot(n_box, n_box)\n                    n_building = n_box / np.sqrt(n2)\n                    n3 = np.dot(n_building, n_building)\n                    dot1 = np.dot(f, n_building)\n#                    print('f pre',f)\n                    f -= (2.0 * (dot1 / n3 * n_building))\n#                    print('f post',f)\n#                    length = np.sqrt(np.dot(f, f))\n                    building_hit = 1\n                    # We need to look into complex absorption and see if this is really the best way.\n    #                if Pf.complexAbsorption:\n    #                    if Pf.absorbPlanes == 2:\n    #                        if (veci[2] > 0.0) and (veci[2] < height1):\n    #                            alpha = alpha_building[0, :]\n    #                        elif veci[2] > height1 and veci[2] <= height2:\n    #                            alpha = alpha_building[1, :]\n    #                    if Pf.absorbPlanes == 3:\n    #                        if veci[2] > height2 and veci[2] <= height3:\n    #                            alpha = alpha_building[2, :]\n    #                    if Pf.absorbPlanes == 4:\n    #                        if veci[2] > height3:\n    #                            alpha = alpha_building[4, :]\n    #                else:\n                    alpha = alpha_building[0, :]\n                    update_freq(dx, alpha, diffusion, all_lamb[strat_no,:], air_absorb)\n            else:  # If there was no interaction with buildings then proceed with one step.\n                veci += (dx_strata * f)\n                f = f - dx_strata * deriv_alpha / atmos.sound_speed[strat_no]\n                update_freq(dx_strata, alpha_nothing, 0, all_lamb[strat_no,:], air_absorb)\n        ray_counter += 1\n        print('finished ray', ray_counter)\n\n    # Radiosity removed for readability\n\n    # Reconstruct the time signal and print to output file\n    for R in ears:\n        R.time_reconstruct(size_fft)\n\n    print('Writing to output file')\n    fileid = Pf.outputfile\n    with open(fileid, 'w') as file:\n        Fun.header(fileid)\n\n    with open(fileid, 'a') as file:\n        for w in range(size_fft):\n            Rps.Receiver.time_header(file, time_array[w], w)\n    print('time: ', time.time()-t)\n\n    # Outputting graphs\n    t = time.time()\n\n    # ######################################################################\n    # Will eventually be moved to a receiver function,\n    # here now for ease of access of others reading this\n    # ######################################################################\n    import matplotlib.font_manager as fm\n    # Font\n    stdfont = fm.FontProperties()\n    stdfont.set_family('serif')\n    stdfont.set_name('Times New Roman')\n    stdfont.set_size(20)\n\n    for R in ears:\n        # For N wave\n        pressure = R.signal\n        i = R.recNumber\n        # plt.figure(i)\n        # plt.figure(num = i, figsize=(19.20, 10.80), dpi=120, facecolor='#eeeeee', edgecolor='r')   # grey\n        # plt.figure(num = i, figsize=(19.20, 10.80), dpi=120, facecolor='#e0dae6', edgecolor='r')   # muted lilac\n        plt.figure(num=i, figsize=(19.20, 10.80), dpi=120, facecolor='#e6e6fa', edgecolor='r')  # lavender\n        # plt.plot(time_array,pressure,'r--')\n        plt.grid(True)\n        plt.plot(time_array, pressure, '#780303')\n        # Labeling axes\n        plt.xlabel('Time [s]', fontproperties=stdfont)\n        plt.ylabel('Pressure [Pa]', fontproperties=stdfont)\n        plt.title('Pressure vs Time of Receiver ' + str(i),\n                  fontproperties=stdfont,\n                  fontsize=26,\n                  fontweight='bold')\n\n        # Saving\n        # plt.savefig(Pf.graphName + str(i) + '.png', facecolor='#eeeeee')    # grey\n        # plt.savefig(Pf.graphName + str(i) + '.png', facecolor='#e0dae6')    # muted lilac\n        plt.savefig(Pf.graphName + str(i) + '.png', facecolor='#e6e6fa')  # lavender\n        print('Saved receiver', i)\n    print('Graph time: ', time.time() - t)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RayTrace/RayTrace.py b/RayTrace/RayTrace.py
--- a/RayTrace/RayTrace.py	
+++ b/RayTrace/RayTrace.py	
@@ -447,7 +447,7 @@
                     tmp = np.dot(ground_n, veci)
                     if tmp != ground_d:
                         veci[2] = 0
-                    print('hit ground at ', I)
+                    #print('hit ground at ', I)
                     dot1 = np.dot(f, ground_n)
                     n2 = np.dot(ground_n, ground_n)
                     f -= (2.0 * (dot1 / n2 * ground_n))
@@ -475,7 +475,7 @@
                 if dx == dx_building:   # if the ray hits the building then change the direction and continue
                     veci += (dx * f)
                     f = f - dx * deriv_alpha / atmos.sound_speed[strat_no]
-                    print('hit building at step ', I)
+                    #print('hit building at step ', I)
                     n2 = np.dot(n_box, n_box)
                     n_building = n_box / np.sqrt(n2)
                     n3 = np.dot(n_building, n_building)
Index: RayTrace/Parameterfile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#     BigBertha\n#   Same as NASABOOM1EMParameterFile\nimport numpy as np\nINPUTFILE = \"input/inputNASABOOM1.txt\"\nRecInput = \"Env/Receivers/PointReceivers.txt\"\nipname = 'Env/SimpleEMBuilding/SingleBuildingTest_3cut.obj'\nFs = 24000.0\nxinitial = 145.0\nyinitial = 35.0\nzinitial = 0.0\nradius = .15\nsoundspeed = 348.537\nps = 1.0\nTemp = 301.5938943\ntime = .01\nhr = 20.0\ntheta = 1.6863372\nphi = 3.44458181\nboomspacing = 0.6   # .6\nstrat_height = 2.0\ntype = 1\n# boomspacing= 0.035\n# boomspacing= 0.1\n# boomspacing= 1\nxmin = -1\nymin = 30.0\nzmin = 0.0\nxmax = -1\nymax = 100.0\nzmax = 25.0\nIMAX = 75\nh = 10.0\nabsorbplanes = 1\n# allocate(tempalphabuilding(absorbplanes,8))\n# Find way to rephrase\n# outputfile = 'PythonTest1.txt'\noutputfile = \"Test_build3\" + str(boomspacing) + \".txt\"       # debugging\ngraphName = \"Test_build3\"                                     # No not use full file extension here\n# Will's\n# outputfile = \"PythonTestEnv\" + str(boomspacing) + \".txt\"       # debugging\n# Turn Radiosity on or off.  This will include diffuse reflections\nradiosity = 0\n# Turn on complex absorption\ncomplexabsorption = 0\n\ntempalphabuilding = np.zeros([absorbplanes, 8])\nif complexabsorption == 1:\n    tempalphabuilding[0] = [0.55, 0.55, 0.25, 0.18, 0.12, 0.07, 0.04, 0.04]\nelse:\n    tempalphabuilding = np.zeros([absorbplanes, 8])\n\n# Enter an array for absorption of alpha ground octave bands between\n# 63 and 8000\ntempalphaground = [0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.03]\n# Enter an array for absorption of Alpha Building octave bands between\n# 63 and 8000\ntempalphabuilding[0, :] = [0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.03]\n# what percentage of the energy is reflected diffusely between 0,1\npercentdiffuse = 0.0\n\n# Broken all down to:\n# complexabsorption = 1\n# if complexabsorption == 1:\n#     tempalphaground=np.array([[0.55,0.55,0.25,0.18,0.12,0.07,0.04,0.04],\n#     [0.01,0.01,0.01,0.02,0.02,0.02,0.03,0.03],[0.01,0.01,0.01,0.02,0.02,0.02,0.03,0.03]])\n# print(tempalphaground)\n\n# if __name__ == \"__main__\":      #being lazy. You can run from here now\n#    import RayTrace\n# pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RayTrace/Parameterfile.py b/RayTrace/Parameterfile.py
--- a/RayTrace/Parameterfile.py	
+++ b/RayTrace/Parameterfile.py	
@@ -3,7 +3,7 @@
 import numpy as np
 INPUTFILE = "input/inputNASABOOM1.txt"
 RecInput = "Env/Receivers/PointReceivers.txt"
-ipname = 'Env/SimpleEMBuilding/SingleBuildingTest_3cut.obj'
+ipname = 'Env/SimpleEMBuilding/SingleBuildingTest.obj'
 Fs = 24000.0
 xinitial = 145.0
 yinitial = 35.0
@@ -16,9 +16,9 @@
 hr = 20.0
 theta = 1.6863372
 phi = 3.44458181
-boomspacing = 0.6   # .6
+boomspacing = 0.06   # .6
 strat_height = 2.0
-type = 1
+type = 2
 # boomspacing= 0.035
 # boomspacing= 0.1
 # boomspacing= 1
@@ -34,8 +34,8 @@
 # allocate(tempalphabuilding(absorbplanes,8))
 # Find way to rephrase
 # outputfile = 'PythonTest1.txt'
-outputfile = "Test_build3" + str(boomspacing) + ".txt"       # debugging
-graphName = "Test_build3"                                     # No not use full file extension here
+outputfile = "Strat_build_ISO" + str(boomspacing) + ".txt"       # debugging
+graphName = "Strat_Build_ISO"                                     # No not use full file extension here
 # Will's
 # outputfile = "PythonTestEnv" + str(boomspacing) + ".txt"       # debugging
 # Turn Radiosity on or off.  This will include diffuse reflections
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"SCOPE_TYPE\" value=\"3\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b1cdacbb-04ed-4032-a219-5d00b79fe37b\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Env/GeometryParser.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Env/GeometryParser.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Fortran/Parameterfile.f\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Fortran/Parameterfile.f\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FindInProjectRecents\">\n    <findStrings>\n      <find>all_lamb</find>\n      <find>for index</find>\n      <find>strat_no</find>\n      <find>lamb</find>\n      <find>index</find>\n      <find>f_initial</find>\n      <find>temp_</find>\n      <find>sphere</find>\n      <find>collision</find>\n      <find>type</find>\n      <find>h</find>\n      <find>Pf.h</find>\n      <find>pf.h</find>\n      <find>strata</find>\n      <find>ground_hit</find>\n      <find>ground</find>\n      <find>dx_ground</find>\n      <find>alpha</find>\n      <find>deriv_alpha</find>\n      <find>alph</find>\n      <find>ground hit</find>\n      <find>dx</find>\n      <find>print</find>\n      <find>hit</find>\n      <find>building</find>\n      <find>veci</find>\n      <find>buil</find>\n      <find>dx_build</find>\n      <find>building_hit</find>\n      <find>ipname</find>\n    </findStrings>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"StratifiedAtmospherePlanes\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/RayTrace/RayTrace.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/Env/geometryPlan.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/Env/GeometryParser.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/RayTrace/ReceiverPointSource.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/Env/SimpleEMBuilding/SingleBuildingTest.obj\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/Fortran/BuildingGeometry.f\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/RayTrace/Parameterfile.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/runRays.py\" root0=\"FORCE_HIGHLIGHTING\" />\n    <setting file=\"file://$PROJECT_DIR$/RayTrace/BuildingGeometry.py\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"IdeDocumentHistory\">\n    <option name=\"CHANGED_PATHS\">\n      <list>\n        <option value=\"$PROJECT_DIR$/setup.py\" />\n        <option value=\"$PROJECT_DIR$/RadiosityFunctions.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/Functions.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/RadiosityFunctions.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/ReceiverPointSource.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/test_Functions.py\" />\n        <option value=\"$PROJECT_DIR$/Env/Environment.py\" />\n        <option value=\"$PROJECT_DIR$/runRays.py\" />\n        <option value=\"$PROJECT_DIR$/Atmosphere/Atmosphere.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/Parameterfile.py\" />\n        <option value=\"$PROJECT_DIR$/RayTrace/RayTrace.py\" />\n        <option value=\"$PROJECT_DIR$/Env/GeometryParser.py\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectFrameBounds\">\n    <option name=\"x\" value=\"38\" />\n    <option name=\"y\" value=\"25\" />\n    <option name=\"width\" value=\"1468\" />\n    <option name=\"height\" value=\"823\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1QjwSVMKhyzzmSqtVERiGNbvXg0\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectView\">\n    <navigator currentView=\"Scope\" currentSubView=\"Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope\" proportions=\"\" version=\"1\">\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"ProjectPane\">\n        <subPane>\n          <expand>\n            <path>\n              <item name=\"RayTrace\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"RayTrace\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"RayTrace\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"RayTrace\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n          </expand>\n          <select />\n        </subPane>\n      </pane>\n      <pane id=\"Scope\">\n        <subPane subId=\"Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope\">\n          <expand>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\".idea\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\"Atmosphere\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\"Env\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\"Env\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n              <item name=\"SimpleEMBuilding\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\"output\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n            <path>\n              <item name=\"RayTrace\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\n              <item name=\"~/PycharmProjects/RayTrace\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\n              <item name=\"RayTrace\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\n            </path>\n          </expand>\n          <select />\n        </subPane>\n      </pane>\n    </panes>\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Env\" />\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"configurable.group.project\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/RayTrace\" />\n    </key>\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/Env\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"RayTrace\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/local/bin/python3.7\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"runRays\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/bin/python3\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <module name=\"\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/runRays.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"false\" />\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b1cdacbb-04ed-4032-a219-5d00b79fe37b\" name=\"Default Changelist\" comment=\"\" />\n      <created>1604287669229</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1604287669229</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"updating gitignore\">\n      <created>1611330363689</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1611330363689</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added Atmosphere Class\">\n      <created>1636255635575</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636255635576</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Implimented Non-Homogeneous Atmosphere (ISO only)\">\n      <created>1636324869332</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636324869332</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Updated working Version\">\n      <created>1636426518743</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636426518743</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Adding Stratified propagation\">\n      <created>1636688080647</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636688080647</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Still buggy propagation\">\n      <created>1636726755648</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636726755650</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"TodoView\">\n    <todo-panel id=\"selected-file\">\n      <is-autoscroll-to-source value=\"true\" />\n    </todo-panel>\n    <todo-panel id=\"all\">\n      <are-packages-shown value=\"true\" />\n      <is-autoscroll-to-source value=\"true\" />\n    </todo-panel>\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"38\" y=\"25\" width=\"1468\" height=\"823\" extended-state=\"0\" />\n    <editor active=\"true\" />\n    <layout>\n      <window_info content_ui=\"combo\" id=\"Project\" order=\"0\" visible=\"true\" weight=\"0.2494817\" />\n      <window_info id=\"Structure\" order=\"1\" side_tool=\"true\" weight=\"0.25\" />\n      <window_info id=\"Favorites\" order=\"2\" side_tool=\"true\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"1\" />\n      <window_info active=\"true\" anchor=\"bottom\" id=\"Run\" order=\"2\" sideWeight=\"0.7699317\" visible=\"true\" weight=\"0.52689654\" />\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"3\" sideWeight=\"0.49810174\" weight=\"0.3986207\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"5\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"6\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"7\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"8\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"9\" sideWeight=\"0.5018982\" side_tool=\"true\" weight=\"0.39917696\" />\n      <window_info anchor=\"bottom\" id=\"Python Console\" order=\"10\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"2\" weight=\"0.25\" />\n    </layout>\n    <layout-to-restore>\n      <window_info content_ui=\"combo\" id=\"Project\" order=\"0\" visible=\"true\" weight=\"0.2627183\" />\n      <window_info id=\"Structure\" order=\"1\" side_tool=\"true\" weight=\"0.25\" />\n      <window_info id=\"Favorites\" order=\"2\" side_tool=\"true\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"1\" />\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"2\" sideWeight=\"0.7699317\" weight=\"0.3415638\" />\n      <window_info active=\"true\" anchor=\"bottom\" id=\"Debug\" order=\"3\" sideWeight=\"0.49810174\" visible=\"true\" weight=\"0.39917696\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"5\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"6\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"7\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"8\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"9\" sideWeight=\"0.5018982\" side_tool=\"true\" visible=\"true\" weight=\"0.39917696\" />\n      <window_info anchor=\"bottom\" id=\"Python Console\" order=\"10\" sideWeight=\"0.499375\" weight=\"0.3292517\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"2\" weight=\"0.25\" />\n    </layout-to-restore>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"1\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"range\">\n                    <value>\n                      <list>\n                        <option value=\"HEAD..Riegel-Speed\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n        <entry key=\"2\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"range\">\n                    <value>\n                      <list>\n                        <option value=\"HEAD..origin/Riegel-Speed\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list />\n          </value>\n        </entry>\n        <entry key=\"User\">\n          <value>\n            <list />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Merge branch 'master' into Riegel-Speed&#10;&#10;# Conflicts:&#10;#&#9;Fortran/Parameterfile.f&#10;#&#9;Fortran/raytrace.o&#10;#&#9;RayTrace.py&#10;#&#9;RayTrace/ReceiverPointSource.py&#10;#&#9;scrap/Parameterfile_costa.py\" />\n    <MESSAGE value=\"Merge branch 'master' into Riegel-Speed&#10;&#10;# Conflicts:&#10;#&#9;Fortran/Parameterfile.f&#10;#&#9;Fortran/raytrace.o&#10;#&#9;RayTrace.py&#10;#&#9;RayTrace/ReceiverPointSource.py&#10;#&#9;__pycache__/BuildingGeometry.cpython-37.pyc&#10;#&#9;__pycache__/Functions.cpython-37.pyc&#10;#&#9;__pycache__/Parameterfile.cpython-37.pyc&#10;#&#9;__pycache__/RayTrace.cpython-37.pyc&#10;#&#9;__pycache__/ReceiverPointSource.cpython-37.pyc&#10;#&#9;scrap/Parameterfile_costa.py\" />\n    <MESSAGE value=\"Adding Graphing Back in\" />\n    <MESSAGE value=\"Added New obj files for corrected vertices.\" />\n    <MESSAGE value=\"Updating from Seaton-Receivers by hand, currently very broken\" />\n    <MESSAGE value=\"updating gitignore\" />\n    <MESSAGE value=\"Testing master code to ensure working version\" />\n    <MESSAGE value=\"Added Atmosphere Class\" />\n    <MESSAGE value=\"Implimented Non-Homogeneous Atmosphere (ISO only)\" />\n    <MESSAGE value=\"Updated working Version\" />\n    <MESSAGE value=\"Adding Stratified propagation\" />\n    <MESSAGE value=\"Still buggy propagation\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Still buggy propagation\" />\n  </component>\n  <component name=\"editorHistoryManager\">\n    <entry file=\"file://$PROJECT_DIR$/.gitignore\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"90\">\n          <caret line=\"6\" selection-start-line=\"6\" selection-end-line=\"6\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/README.md\">\n      <provider selected=\"true\" editor-type-id=\"split-provider[text-editor;markdown-preview-editor]\">\n        <state split_layout=\"SPLIT\">\n          <first_editor />\n          <second_editor />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/requirements.txt\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/faceRec_plan.txt\" />\n    <entry file=\"file://$PROJECT_DIR$/setup.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state>\n          <caret column=\"20\" selection-start-column=\"20\" selection-end-column=\"20\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/test_Functions.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"15\">\n          <caret line=\"1\" column=\"7\" selection-start-line=\"1\" selection-start-column=\"7\" selection-end-line=\"1\" selection-end-column=\"7\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/Environment.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"459\">\n          <caret line=\"102\" column=\"4\" selection-start-line=\"102\" selection-start-column=\"4\" selection-end-line=\"102\" selection-end-column=\"4\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/monkey.mtl\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/runRays.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"150\">\n          <caret line=\"10\" selection-start-line=\"10\" selection-end-line=\"10\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/Functions.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"765\">\n          <caret line=\"52\" column=\"63\" selection-start-line=\"52\" selection-start-column=\"58\" selection-end-line=\"52\" selection-end-column=\"63\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TestGraph2.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TestGraph3.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TestGraph4.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TestGraph5.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/TestGraph1.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/RadiosityFunctions.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"450\">\n          <caret line=\"30\" column=\"53\" selection-start-line=\"30\" selection-start-column=\"53\" selection-end-line=\"30\" selection-end-column=\"53\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/BuildingGeometry.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/SimpleEMBuilding/SingleBuilding.obj\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Atmosphere/Atmosphere.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"120\">\n          <caret line=\"9\" column=\"17\" selection-start-line=\"9\" selection-start-column=\"17\" selection-end-line=\"9\" selection-end-column=\"17\" />\n          <folding>\n            <element signature=\"e#140#166#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/geometryPlan.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/ReceiverPointSource.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"930\">\n          <caret line=\"62\" column=\"42\" selection-start-line=\"62\" selection-start-column=\"42\" selection-end-line=\"62\" selection-end-column=\"42\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/PythonTestSimple0.6_Plane.txt\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"-63\" />\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Plane1.png\">\n      <provider selected=\"true\" editor-type-id=\"images\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/SimpleEMBuilding/SingleBuildingTest.obj\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"180\">\n          <caret line=\"12\" column=\"20\" selection-start-line=\"12\" selection-start-column=\"20\" selection-end-line=\"12\" selection-end-column=\"20\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/Parameterfile.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"152\">\n          <caret line=\"51\" column=\"53\" selection-start-line=\"51\" selection-start-column=\"53\" selection-end-line=\"51\" selection-end-column=\"53\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/RayTrace/RayTrace.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"73\">\n          <caret line=\"273\" column=\"36\" selection-start-line=\"273\" selection-start-column=\"36\" selection-end-line=\"273\" selection-end-column=\"36\" />\n          <folding>\n            <element signature=\"e#516#557#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/SimpleEMBuilding/SingleBuildingTest_3cut.mtl\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/SimpleEMBuilding/SingleBuildingTest_3cut.obj\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"84\" column=\"30\" selection-start-line=\"84\" selection-start-column=\"30\" selection-end-line=\"84\" selection-end-column=\"30\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/Env/GeometryParser.py\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"239\">\n          <caret line=\"161\" column=\"55\" lean-forward=\"true\" selection-start-line=\"161\" selection-start-column=\"55\" selection-end-line=\"161\" selection-end-column=\"55\" />\n          <folding>\n            <element signature=\"e#101#119#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -27,8 +27,8 @@
   <component name="ChangeListManager">
     <list default="true" id="b1cdacbb-04ed-4032-a219-5d00b79fe37b" name="Default Changelist" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Env/GeometryParser.py" beforeDir="false" afterPath="$PROJECT_DIR$/Env/GeometryParser.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Fortran/Parameterfile.f" beforeDir="false" afterPath="$PROJECT_DIR$/Fortran/Parameterfile.f" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RayTrace/Parameterfile.py" beforeDir="false" afterPath="$PROJECT_DIR$/RayTrace/Parameterfile.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RayTrace/RayTrace.py" beforeDir="false" afterPath="$PROJECT_DIR$/RayTrace/RayTrace.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
